test patterns.observable.ObservableHighscoreList

instance highscoreList = new ObservableHighscoreList(3)

sequence constructor {
	-->
	state highscoreList {
		size() == 0
	}
}

sequence addElementSimple {
	-- highscoreList.addResult(5) -->
	state {
		highscoreList ?= #[5]
	}
	-- highscoreList.addResult(6) -->
	state {
		highscoreList ?= #[5, 6]
	}
	-- highscoreList.addResult(2) -->
	state {
		highscoreList ?= #[2, 5, 6]
	}
}

sequence addElementMoreThanMax {
	-- highscoreList.addResult(5), highscoreList.addResult(6), highscoreList.addResult(2) -->
	state {
		highscoreList ?= #[2, 5, 6]
	}
	-- highscoreList.addResult(3) -->
	state {
		highscoreList ?= #[2, 3, 5]
	}
	-- highscoreList.addResult(7) -->
	state {
		highscoreList ?= #[2, 3, 5]
	}
}

sequence addElementDuplicate {
	-- highscoreList.addResult(5), highscoreList.addResult(6), highscoreList.addResult(2) -->
	state {
		highscoreList ?= #[2, 5, 6]
	}
	-- highscoreList.addResult(2) -->
	state {
		highscoreList ?= #[2, 2, 5]
	}
}

val int pos1 = -1, int pos2 = -1

method void addResult(int pos, int element) {
	pos1 = pos
	highscoreList.addResult(element)
	assertEquals(pos1, pos2)
}

sequence listListenerSimple {
	-- highscoreList.addObservableListListener([list, pos | pos2 = pos]),
	addResult(0, 5) -->
	state {
		highscoreList ?= #[5]
	}
	-- addResult(1, 6) -->
	state {
		highscoreList ?= #[5, 6]
	}
	-- addResult(0, 2) -->
	state {
		highscoreList ?= #[2, 5, 6]
	}
}

sequence listListenerMoreThanMax {
	-- highscoreList.addObservableListListener([list, pos | pos2 = pos]),
	highscoreList.addResult(5), highscoreList.addResult(6), highscoreList.addResult(2) -->
	state {
		highscoreList ?= #[2, 5, 6]
	}
	-- addResult(1, 3) -->
	state {
		highscoreList ?= #[2, 3, 5]
	}
	-- pos2 = -1, addResult(-1, 7) -->
	state {
		highscoreList ?= #[2, 3, 5]
	}
}

sequence listListenerDuplicate {
	-- highscoreList.addObservableListListener([list, pos | pos2 = pos]),
	highscoreList.addResult(5), highscoreList.addResult(6), highscoreList.addResult(2) -->
	state {
		highscoreList ?= #[2, 5, 6]
	}
	-- addResult(1, 2) -->
	state {
		highscoreList ?= #[2, 2, 5]
	}
}

method operator_assertEquals(ObservableHighscoreList highscoreList, int[] elements) {
	elements.length ?= highscoreList.size()
	var i = 0
	for (element : elements) {
		element ?= highscoreList.getElement(i)
		i++
	}
}

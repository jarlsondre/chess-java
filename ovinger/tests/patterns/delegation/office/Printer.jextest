import java.util.Collection
import java.util.function.BinaryOperator

test class patterns.delegation.office.Printer {
	new()
	void printDocument(String document, Employee employee)
	Collection<String> getPrintHistory(Employee employee)
}
class Clerk implements Employee {
	new(Printer printer)
}
interface Employee {
	double doCalculations(BinaryOperator<Double> operation, double value1, double value2)
	void printDocument(String document)
	int getTaskCount()
	int getResourceCount()
}

instance Printer printer = new Printer()

instance Clerk clerk1 = new Clerk(printer)
instance Clerk clerk2 = new Clerk(printer)

sequence printSingleClerk{
	-->
	state{
		printer.getPrintHistory(clerk1).size == 0
	}
	"Printer to dokumenter" -- printer.printDocument("dokument1", clerk1)-->
	state{
		printer.getPrintHistory(clerk1).size == 1
		printer.getPrintHistory(clerk1).get(0) == "dokument1"
	}
	"Printer et dokument til" -- printer.printDocument("dokument2", clerk1) -->
	state{
		printer.getPrintHistory(clerk1).size == 2
		printer.getPrintHistory(clerk1).get(1) == "dokument2"
	}
}

sequence printMulipleClerks{
	-->
	state{
		printer.getPrintHistory(clerk1).size == 0
		printer.getPrintHistory(clerk2).size == 0
	}
	"Printer dokument for Clerk nr. 1" -- printer.printDocument("dokument1", clerk1) -->
	state{
		printer.getPrintHistory(clerk1).size == 1
		printer.getPrintHistory(clerk2).size == 0
	}
	"Printer dokument for Clerk nr. 2" -- printer.printDocument("dokument2", clerk2) -->
	state{
		printer.getPrintHistory(clerk1).size == 1
		printer.getPrintHistory(clerk2).size == 1
	}
}

sequence printHistoryModification{
	"Printer to dokumenter" -- printer.printDocument("dokument1", clerk1), printer.printDocument("dokument2", clerk1) -->
	state{
		printer.getPrintHistory(clerk1).size == 2
	}
	"Fjerner et dokument fra historikk og sjekker at printer-historikken er uendret" -- printer.getPrintHistory(clerk1).remove(0)-->
	state{
		printer.getPrintHistory(clerk1).size == 2
	}
}
import java.util.function.BinaryOperator
import java.util.Collection

test class patterns.delegation.office.Clerk implements Employee {
	new(Printer printer)
}
interface Employee {
	double doCalculations(BinaryOperator<Double> operation, double value1, double value2)
	void printDocument(String document)
	int getTaskCount()
	int getResourceCount()
}
class Printer {
	new()
	void printDocument(String document, Employee employee)
	Collection<String> getPrintHistory(Employee employee)
}

instance Printer printer = new Printer
instance Clerk clerk = new Clerk(printer)

sequence doCalculations {
	-->
	state {
		clerk.taskCount == 0
	}
	"Gjør en beregning" -- clerk.doCalculations([double x, double y | x + y ], 2.0, 3.5) ?= 5.5 -->
	state {
		clerk.taskCount == 1
	}
	"Gjør en beregning" -- clerk.doCalculations([double x, double y | x / y ], 2.0, 4.0) ?= 0.5 -->
	state{
		clerk.taskCount == 2
	}
}

sequence printDocuments {
	-->
	state{
		clerk.taskCount == 0
	}
	"Printer et dokument" -- clerk.printDocument("dokument1") -->
	state{
		printer.getPrintHistory(clerk).get(0) == "dokument1"
		clerk.taskCount == 1
		printer.getPrintHistory(clerk).size == 1
	}
	"Printer et dokument" -- clerk.printDocument("dokument2") -->
	state{
		printer.getPrintHistory(clerk).get(1) == "dokument2"
		clerk.taskCount == 2
		printer.getPrintHistory(clerk).size == 2
	}
}

sequence taskCount {
	-->
	state{
		clerk.taskCount == 0
	}
	"Printer et dokument" -- clerk.printDocument("dokument1") -->
	state{
		clerk.taskCount == 1
	} 
	"Gjør en beregning" -- clerk.doCalculations([double x, double y | x + y ], 2.0, 3.5) -->
	state{
		clerk.taskCount == 2
	} 
} 

sequence resourceCount{
	-->
	state {
		clerk.resourceCount == 1
	}
}


method boolean operator_assertEquals(double first, double second) {
	assertEquals(first, second, 0.000001d);
	return true;
}
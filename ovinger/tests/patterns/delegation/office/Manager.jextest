import java.util.ArrayList
import java.util.Arrays
import java.util.function.BinaryOperator
import java.util.Collection

test class patterns.delegation.office.Manager implements Employee {
	new(Collection<Employee> employees)
}
class Clerk implements Employee {
	new(Printer printer)
}
interface Employee {
	double doCalculations(BinaryOperator<Double> operation, double value1, double value2)
	void printDocument(String document)
	int getTaskCount()
	int getResourceCount()
}
class Printer {
	new()
	void printDocument(String document, Employee employee)
	Collection<String> getPrintHistory(Employee employee)
}

instance Printer printer = new Printer()
instance Clerk clerk = new Clerk(printer)
instance Clerk secondClerk = new Clerk(printer)
instance Manager manager = new Manager(Arrays.asList(clerk))


sequence noEmployeesConstructor{
	"Lager Manager med tom Employee-samling"--
	new Manager(new ArrayList<Employee>) throws IllegalArgumentException
}

sequence resourceCount{
	"Sjekker getResourceCount uten mellomledere"-- manager.resourceCount == 2 -->
	state{
		
	}
}

sequence middleManagementResourceCounts{
	instance topManager = new Manager(Arrays.asList(manager))
	"Sjekker getResourceCount med mellomleder"-- topManager.resourceCount == 3 -->
	state {		
	}
}


sequence doCalculations{
	-->
	state{
		clerk.taskCount == 0
		manager.taskCount == 0
	}
	"Gjør en beregning" -- manager.doCalculations([double x, double y | x + y ], 2.0, 3.5) ?= 5.5 -->
	state{
		clerk.taskCount == 1
		manager.taskCount == 1
	}
}

sequence printDocuments{
	"Printer et dokument" -- manager.printDocument("dokument1")-->
	state{
		printer.getPrintHistory(clerk).get(0) == "dokument1"
		manager.taskCount == 1
		clerk.taskCount == 1
		printer.getPrintHistory(clerk).size == 1
	}
}

sequence taskCount{
	-->
	state{
		manager.taskCount == 0
		clerk.taskCount == 0
	}
	"Printer et dokument" -- manager.printDocument("dokument") -->
	state{
		manager.taskCount == 1
		clerk.taskCount == 1
	} 
	"Gjør en beregning" -- manager.doCalculations([double x, double y | x + y ], 2.0, 3.5) ?= 5.5 -->
	state{
		manager.taskCount == 2
		clerk.taskCount == 2
	}
} 


sequence severalClerks{
	instance Manager multiManager = new Manager(Arrays.asList(clerk, secondClerk))
	-->
	state{
		multiManager.resourceCount == 3
		clerk.resourceCount == 1
		secondClerk.resourceCount == 1
	}
	"Printer et dokument"-- multiManager.printDocument("dokument") -->
	state{
		multiManager.taskCount == 1
		(clerk.taskCount == 1 || secondClerk.taskCount == 1) && (clerk.taskCount == 0 || secondClerk.taskCount == 0)
	}
	"Gjør en beregning" -- multiManager.doCalculations([double x, double y | x + y ], 2.0, 3.5) ?= 5.5 -->
	state{
		multiManager.taskCount == 2
	} 
}

method boolean operator_assertEquals(double first, double second) {
	assertEquals(first, second, 0.000001d);
	return true;
}
test class objectstructures.CardDeck {
	new(int size)
	int getCardCount()
	Card getCard(int pos)
	void deal(CardHand hand, int count)
	void shufflePerfectly()
}
class Card {
}
class CardHand {
}

import java.util.Collection

instance CardDeck deck = new CardDeck(2)

sequence constructor {
	-->
	state {
		deck ?= #["S1", "S2", "H1", "H2", "D1", "D2", "C1", "C2"];
	}
}

sequence shufflePerfectly {
	-- shufflePerfectly -->
	state {
		deck ?= #["S1", "D1", "S2", "D2", "H1", "C1", "H2", "C2"]
	}
}

sequence deal {
	
	instance CardHand hand
	
	-- deal(hand, 3) -->
	state {
		deck ?= #["S1", "S2", "H1", "H2", "D1"]
	}
}

method boolean ?= (CardDeck it, Collection<String> toStrings) {
	if (! (cardCount ?= toStrings.size)) {
		return false
	}
	var i = 0
	for (toString : toStrings) {
		val card = getCard(i)
		if (! (String.valueOf(card.suit) + card.face ?= toString)) {
			return false
		} 
		i = i + 1
	}
	true
}

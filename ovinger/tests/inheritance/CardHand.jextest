test inheritance.CardHand
	
import java.util.Collection
import java.util.Iterator

instance CardHand hand = new CardHand(2)

instance Card s1 = new Card('S', 1), Card c2 = new Card('C', 2)
instance Collection<Card> expected = #[s1, c2] 

sequence addCard "Tester maxCardCount" {
	state {
		hand instanceof CardContainerImpl
		hand.cardCount == 0
	}
	"Legger til kort" -- hand.addCard(new Card('S',1)), hand.addCard(new Card('S',2)) -->
	state hand {
		cardCount == 2
	}
	"Test at det ikke kan legges til flere kort" -- hand.addCard(new Card('S', 3)) throws IllegalStateException
	-->
	state hand {
		cardCount == 2
	}
}

sequence cardContainer {
	-- hand.addCard(s1), hand.addCard(c2), hand.iterator -->
	state {
		hand ?= expected
	}
}

sequence handIterator {
	-- hand.addCard(s1), hand.addCard(c2), hand.iterator -->
	state {
		hand ?= expected.iterator
	}
}

method boolean operator_assertEquals(CardContainer it, Collection<Card> expected) {
	expected.size ?= cardCount
	val expectedIt = expected.iterator
	var i = 0
	while (expectedIt.hasNext) {
		val expectedCard = expectedIt.next
		val actualCard = getCard(i)
		expectedCard.suit ?= actualCard.suit
		expectedCard.face ?= actualCard.face
		i = i + 1
	}
	true
}

method boolean operator_assertEquals(Iterable<Card> actual, Iterator<Card> expected) {
	val actualIt = actual.iterator
	while (expected.hasNext) {
		assertTrue(actualIt.hasNext)
		val expectedCard = expected.next
		val actualCard = actualIt.next
		expectedCard.suit ?= actualCard.suit
		expectedCard.face ?= actualCard.face
	}
	true
}

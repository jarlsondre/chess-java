test class interfaces.CardContainerIterator implements Iterator<Card> {
	new(CardDeck deck)
}
interface interfaces.CardContainer extends Iterable<Card> {
	int getCardCount()
	int getCard(int pos)
}
class interfaces.CardDeck implements CardContainer {
	new(int count)
}
class interfaces.Card {
	new(char suit, int face)
	char getSuit()
	int getFace()
}
import java.util.Iterator

instance CardContainerIterator cardContainerIterator = new CardContainerIterator(new CardDeck(2))
instance
	Card s1 = new Card('S', 1), Card s2 = new Card('S', 2),
	Card h1 = new Card('H', 1), Card h2 = new Card('H', 2),
	Card d1 = new Card('D', 1), Card d2 = new Card('D', 2),
	Card c1 = new Card('C', 1), Card c2 = new Card('C', 2)

sequence cardContainerIterator {
	-->
	state {
		testCards(cardContainerIterator, #[s1, s2, h1, h2, d1, d2, c1, c2].iterator)
	}
}

method void testCards(Iterator<Card> actual, Iterator<Card> expected) {
	while (expected.hasNext) {
		assertTrue(actual.hasNext)
		val expectedCard = expected.next
		val actualCard = actual.next
		expectedCard.suit ?= actualCard.suit
		expectedCard.face ?= actualCard.face
	}
}

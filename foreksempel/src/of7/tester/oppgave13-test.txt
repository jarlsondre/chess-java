@Test
public void testPromote() {
	Department university = new Department();
	Department computerScience = new Department(university);
	
	Employee employee = new Employee(computerScience);
	
	assertTrue("Before promoting the employee should belong to the computer science department", computerScience.getEmployees().contains(employee));
	assertTrue("Before promoting the employee should belong to the university", university.getEmployees().contains(employee));
	
	employee.promote();

	assertFalse("After promoting the employee should not belong to the computer science department", computerScience.getEmployees().contains(employee));
	assertTrue("After promoting the employee should belong to the university", university.getEmployees().contains(employee));
	
	try {
		employee.promote();
		fail("Promotion should throw an IllegalStateException when not possible");
	} catch (IllegalStateException e) {
		assertTrue("After a failed promotion the employee should still belong to the university", university.getEmployees().contains(employee));
	} catch (Exception e) {
		fail("Promotion should throw an IllegalStateException when not possible");
	}
}
